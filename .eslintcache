[{"D:\\WebProgram\\ISharePortal\\src\\redux\\store.jsx":"1","D:\\WebProgram\\ISharePortal\\src\\containers\\Admin\\user\\index.jsx":"2","D:\\WebProgram\\ISharePortal\\src\\config\\meun_config.jsx":"3","D:\\WebProgram\\ISharePortal\\src\\containers\\Admin\\category\\index.jsx":"4","D:\\WebProgram\\ISharePortal\\src\\containers\\Admin\\product\\index.jsx":"5","D:\\WebProgram\\ISharePortal\\src\\redux\\reducers\\login_reducer.jsx":"6","D:\\WebProgram\\ISharePortal\\src\\containers\\Admin\\left_nav\\index.jsx":"7","D:\\WebProgram\\ISharePortal\\src\\api\\index.jsx":"8","D:\\WebProgram\\ISharePortal\\src\\index.js":"9","D:\\WebProgram\\ISharePortal\\src\\containers\\Header\\index.jsx":"10"},{"size":274,"mtime":1615542427713,"results":"11","hashOfConfig":"12"},{"size":207,"mtime":1615542427703,"results":"13","hashOfConfig":"12"},{"size":1290,"mtime":1615542427692,"results":"14","hashOfConfig":"12"},{"size":7221,"mtime":1615542427695,"results":"15","hashOfConfig":"12"},{"size":4283,"mtime":1615686841158,"results":"16","hashOfConfig":"12"},{"size":723,"mtime":1615542427712,"results":"17","hashOfConfig":"12"},{"size":3459,"mtime":1615542427699,"results":"18","hashOfConfig":"12"},{"size":1153,"mtime":1615684748800,"results":"19","hashOfConfig":"12"},{"size":311,"mtime":1615542427709,"results":"20","hashOfConfig":"12"},{"size":3069,"mtime":1615542427705,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1m9hebj",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\WebProgram\\ISharePortal\\src\\redux\\store.jsx",[],"D:\\WebProgram\\ISharePortal\\src\\containers\\Admin\\user\\index.jsx",[],"D:\\WebProgram\\ISharePortal\\src\\config\\meun_config.jsx",["44"],"D:\\WebProgram\\ISharePortal\\src\\containers\\Admin\\category\\index.jsx",["45","46"],"import React, { Component } from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { Card, message, Table, Button, Modal, Form, Input } from \"antd\";\r\nimport { getEventsByUser, addEvent, updateEvent } from \"../../../api\";\r\n\r\n\r\nclass Category extends Component {\r\n    state = {\r\n        categoryList: [],//events list\r\n        visible: false,\r\n        operType: '',\r\n        userId: this.props.userInfo.user.id,\r\n        isLoading: true,\r\n        modalCurentValue: 'test',\r\n        modalCurentId: '',\r\n    }\r\n\r\n    formRef = React.createRef()\r\n\r\n    componentDidMount() {\r\n        this.getCateGoryList()\r\n    }\r\n\r\n\r\n    getCateGoryList = () => {\r\n        getEventsByUser(7, 'ListEventsById').then((res) => {\r\n            if (res.status === 401) {\r\n                message.error(res.data)\r\n            } else {\r\n                message.success(\"Success\", 1)\r\n                this.setState({ isLoading: false })\r\n                console.log(res);\r\n                this.setState({ categoryList: res.reverse() })\r\n            }\r\n        })\r\n            .catch(function (error) {\r\n                message.error(\"Get Event Fail\", 1)\r\n                console.log(error);\r\n            });\r\n\r\n    }\r\n\r\n    showUpdate = (item) => {\r\n        let { id, eventName } = {...item}\r\n        this.setState({\r\n            operType: 'UPDATE',\r\n            modalCurentValue: eventName,\r\n            modalCurentId: id,\r\n            visible: true,\r\n        }, () => {\r\n            //this.formRef.current.setFieldsValue(\"eventName\", this.state.modalCurentValue)\r\n        })\r\n    }\r\n\r\n    showAdd = () => {\r\n        this.setState({\r\n            operType: 'ADD',\r\n            visible: true,\r\n            modalCurentValue:'',\r\n            modalCurentId: '',\r\n        })\r\n    }\r\n\r\n    toUpdate = (values) => {\r\n        updateEvent(values).then((res) => {\r\n            let { status, resultData, msg } = res\r\n            if (status === 1) {\r\n                this.getCateGoryList()\r\n                this.setState({\r\n                    visible: false\r\n                })\r\n            }\r\n            if (status === -1) message.error('Update Fail')\r\n        }).catch(\r\n            errorInfo => {\r\n                console.log(\"errorInfo\")\r\n                console.log(errorInfo)\r\n                return\r\n            }\r\n        )\r\n    }\r\n\r\n    toAdd = (values) => {\r\n        addEvent(values).then((res) => {\r\n            console.log(res)\r\n            let result = res\r\n            const { status, resultData, msg } = result\r\n\r\n            if (status === 1) {\r\n                message.success(msg)\r\n                let categoryList = [...this.state.categoryList]\r\n                categoryList.unshift(resultData[0])\r\n                this.setState({ categoryList })\r\n            }\r\n            if (status === -1) message.error('Add Fail')\r\n        }).catch(\r\n            errorInfo => {\r\n                console.log(\"errorInfo\")\r\n                console.log(errorInfo)\r\n                return\r\n            }\r\n        )\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target\r\n        const value = target.value\r\n        const name = target.name\r\n    \r\n        this.setState({\r\n          [name]: value\r\n        })\r\n      }\r\n\r\n    render() {\r\n\r\n        const dataSource = this.state.categoryList\r\n        let { visible, operType } = this.state;\r\n\r\n        const columns = [\r\n            {\r\n                title: 'Event Name',\r\n                dataIndex: 'eventName',\r\n                key: 'eventName'\r\n            },\r\n            {\r\n                title: 'Control',\r\n                dataIndex: 'id',\r\n                key: 'Control',\r\n                render: (text, record, index) => {\r\n                    return <Button type=\"link\" onClick={() => this.showUpdate(record)}>Update</Button>\r\n                },\r\n                width: '25%',\r\n                align: 'center'\r\n            },\r\n        ]\r\n\r\n        const handleOk = () => {\r\n            let { operType } = this.state\r\n\r\n            this.formRef.current.validateFields().then(values => {\r\n                console.log(values)\r\n                let  EventName  = values.eventName\r\n                switch (operType) {\r\n                    case 'ADD':\r\n                        let { userId } = this.state\r\n                        this.toAdd({ userId, EventName })\r\n                        break;\r\n                    case 'UPDATE':\r\n                        let Id = this.state.modalCurentId\r\n                        this.toUpdate({ Id, EventName })\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                this.setState({ visible: false })\r\n\r\n            }).catch(errorInfo => {\r\n                console.log(\"errorInfo\")\r\n                console.log(errorInfo)\r\n                return\r\n            }\r\n            )\r\n        };\r\n\r\n        const handleCancel = () => {\r\n            this.setState({ visible: false })\r\n            this.formRef.current.resetFields()\r\n\r\n        };\r\n\r\n\r\n        return (\r\n            <div>\r\n                <Card title=\"Default size card\" extra={<Button onClick={this.showAdd}>ADD+</Button>} >\r\n                    <Table\r\n                        dataSource={dataSource}\r\n                        columns={columns}\r\n                        bordered\r\n                        rowKey=\"id\"\r\n                        pagination={{ pageSize: 5, showQuickJumper: true }}\r\n                        loading={this.state.isLoading}\r\n                    >\r\n                    </Table>\r\n                </Card>\r\n                <Modal\r\n                    title={operType === 'ADD' ? 'ADD' : 'UPDATE'}\r\n                    visible={visible}\r\n                    onOk={handleOk}\r\n                    onCancel={handleCancel}\r\n\r\n                >\r\n                    <Form\r\n                        name=\"nest-messages\"\r\n                        onFinish={this.onFinish}\r\n                        ref={this.formRef}\r\n                        initialValues={{'eventName': this.state.modalCurentValue}}\r\n                    >\r\n                        <Form.Item\r\n                            name='eventName'\r\n                            label=\"Event Name\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: 'Event Name Needed'\r\n                                },\r\n                                {\r\n                                    pattern: /^[A-Za-z0-9]{3,7}$/,\r\n                                    message: ' 3-7 letter and num'\r\n                                }\r\n                            ]}\r\n                        >\r\n                            <Input\r\n                                placeholder=\"Enter event name\"\r\n                            />\r\n                            \r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet withCategory = withRouter(Category)\r\n\r\nexport default connect(\r\n    state => ({\r\n        isLogin: state.userInfo.isLogin,\r\n        userInfo: state.userInfo,\r\n    }),\r\n    {\r\n\r\n    }\r\n)(withCategory)\r\n",["47","48"],"D:\\WebProgram\\ISharePortal\\src\\containers\\Admin\\product\\index.jsx",["49","50","51","52","53"],"D:\\WebProgram\\ISharePortal\\src\\redux\\reducers\\login_reducer.jsx",[],"D:\\WebProgram\\ISharePortal\\src\\containers\\Admin\\left_nav\\index.jsx",["54"],"D:\\WebProgram\\ISharePortal\\src\\api\\index.jsx",[],"D:\\WebProgram\\ISharePortal\\src\\index.js",[],"D:\\WebProgram\\ISharePortal\\src\\containers\\Header\\index.jsx",[],{"ruleId":"55","severity":1,"message":"56","line":1,"column":1,"nodeType":"57","endLine":58,"endColumn":2},{"ruleId":"58","severity":1,"message":"59","line":67,"column":27,"nodeType":"60","messageId":"61","endLine":67,"endColumn":37},{"ruleId":"58","severity":1,"message":"62","line":67,"column":39,"nodeType":"60","messageId":"61","endLine":67,"endColumn":42},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"58","severity":1,"message":"67","line":2,"column":10,"nodeType":"60","messageId":"61","endLine":2,"endColumn":17},{"ruleId":"58","severity":1,"message":"68","line":3,"column":10,"nodeType":"60","messageId":"61","endLine":3,"endColumn":20},{"ruleId":"58","severity":1,"message":"69","line":4,"column":40,"nodeType":"60","messageId":"61","endLine":4,"endColumn":45},{"ruleId":"58","severity":1,"message":"70","line":4,"column":47,"nodeType":"60","messageId":"61","endLine":4,"endColumn":51},{"ruleId":"71","severity":1,"message":"72","line":120,"column":25,"nodeType":"73","endLine":125,"endColumn":27},{"ruleId":"58","severity":1,"message":"74","line":12,"column":18,"nodeType":"60","messageId":"61","endLine":12,"endColumn":22},"import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'resultData' is assigned a value but never used.","Identifier","unusedVar","'msg' is assigned a value but never used.","no-native-reassign",["75"],"no-negated-in-lhs",["76"],"'connect' is defined but never used.","'withRouter' is defined but never used.","'Modal' is defined but never used.","'Form' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Item' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]